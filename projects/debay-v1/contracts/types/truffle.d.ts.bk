declare module 'truffle' {

  export type Accounts = string[];

  /**
   * NOTE: Use TypeChain for codegen type support of smart contracts.
   */
  export interface Artifacts {
    require<T = any>(name: string): Contract<T>;
  }

  export interface Contract<T> extends ContractNew<any[]> {
    deployed(): Promise<T>;
    at(address: string): Promise<T>;
    address: string;
    contractName: string;
  }

  export interface ContractFunction extends Mocha.SuiteFunction {
    (title: string, fn: (this: Mocha.Suite, accounts: Truffle.Accounts) => void): Mocha.Suite;
    only: ExclusiveContractFunction;
    skip: PendingContractFunction;
  }

  export interface ContractInstance {
    address: string;
    contract: any;
    transactionHash: string;
  }

  export interface ContractNew<ARGs extends any[]> {
    "new"(...args: ARGs): any;
  }

  export interface Deployer {
    deploy<T extends any[]>(c: ContractNew<T>, ...args: T): Deployer;
    link(library: Truffle.Contract<any>, destination: Truffle.Contract<any>): Deployer;
    link(library: Truffle.Contract<any>, destinations: Array<Truffle.Contract<any>>): Deployer;
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null): Promise<TResult1 | TResult2>;
  }

  export interface ExclusiveContractFunction extends Mocha.ExclusiveSuiteFunction {
    (title: string, fn: (this: Mocha.Suite, accounts: Truffle.Accounts) => void): Mocha.Suite;
  }

  export type Migration = (deploy: Deployer, network: string, accounts: Accounts) => void;

  export interface PendingContractFunction extends Mocha.PendingSuiteFunction {
    (title: string, fn: (this: Mocha.Suite, accounts: Truffle.Accounts) => void): Mocha.Suite | void;
  }

  export interface TransactionDetails {
    from?: string;
    gas?: BN | number | string;
    gasPrice?: BN | number | string;
    value?: BN | string;
  }

  export interface TransactionLog {
    address: string;
    args: any;
    blockHash: string;
    blockNumber: number;
    event: string;
    logIndex: number;
    transactionHash: string;
    transactionIndex: number;
    type: string;
  }

  export interface TransactionResponse {
    tx: string;
    receipt: any;
    logs: TransactionLog[];
  }

  // declare type BN = import("bn.js");
  // declare type Web3 = import("web3");
  // declare const web3: Web3;

  declare const artifacts: Artifacts;

  declare const contract: ContractFunction;

}
